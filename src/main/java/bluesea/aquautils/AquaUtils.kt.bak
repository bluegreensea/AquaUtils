package bluesea.aquautils

import com.mojang.brigadier.Command
import com.mojang.brigadier.CommandDispatcher
import com.mojang.brigadier.arguments.StringArgumentType.getString
import com.mojang.brigadier.arguments.StringArgumentType.greedyString
import net.fabricmc.api.ModInitializer
import net.fabricmc.fabric.api.command.v2.CommandRegistrationCallback
import net.minecraft.command.CommandRegistryAccess
import net.minecraft.command.argument.EntityArgumentType
import net.minecraft.command.argument.EntityArgumentType.getPlayers
import net.minecraft.network.message.MessageType
import net.minecraft.server.command.CommandManager.*
import net.minecraft.server.command.ServerCommandSource
import net.minecraft.server.network.ServerPlayerEntity
import net.minecraft.text.Text
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo


class BlueUtil {
    companion object {
        private val LOGGER: Logger = LoggerFactory.getLogger("Blue Util")

        private val lastMessage: HashMap<Text, String> = HashMap()
        private val lastTimes: HashMap<Text, Int> = HashMap()
        private var voteLast = false
        private var voteReset = false
        private var voteLastStr: String? = null
        private val voteStrs: HashMap<Text, String> = HashMap()

        @Suppress("unused")
        val initializer = ModInitializer {
            CommandRegistrationCallback.EVENT.register(CommandRegistrationCallback { dispatcher: CommandDispatcher<ServerCommandSource?>, _: CommandRegistryAccess?, environment: RegistrationEnvironment ->
                if (environment.dedicated) {
                    dispatcher.register(literal("votelastget").executes { context ->
                        context.source.player!!.sendMessage(Text.of("搶票結果: " + if (voteLastStr == null) "無記錄" else voteLastStr))

                        Command.SINGLE_SUCCESS
                    })
                    dispatcher.register(literal("voteget")
                        .executes { context ->
                            LOGGER.debug(context.source.player!!.name.string + " use voteget")
                            val strings = StringBuilder()
                            val votes: HashMap<String, Int> = HashMap()
                            voteStrs.forEach { (_, v) ->
                                votes[v] = (votes[v] ?: 0) + 1
                            }
                            votes.forEach { (k, v) ->
                                try {
                                    k.substring(1).toInt()
                                    strings.append(k).append(" 人數: ").append(v).append("\n")
                                } catch (ignored: Exception) {
                                }
                            }
                            voteStrs.forEach { (k: Any, v: Any) ->
                                try {
                                    v.substring(1).toInt()
                                } catch (ignored: Exception) {
                                    strings.append(k.string).append(" 投了 ").append(v)
                                }
                            }
                            context.source.player!!.sendMessage(
                                Text.of(
                                    """
                                    投票結果:
                                    ${if (strings.toString() == "") "無記錄" else strings.toString()}
                                    """.trimIndent()
                                )
                            )

                            Command.SINGLE_SUCCESS
                        }
                        .then(argument("targets", EntityArgumentType.players()).executes { ctx ->
                            val strings = StringBuilder()
                            getPlayers(ctx, "targets").forEach { player ->
                                if (voteStrs[player.name] != null) strings.append(
                                    player.name.string
                                ).append(" 的投票記錄: ").append(voteStrs[player.name]).append("\n")
                            }
                            ctx.source.player!!.sendMessage(
                                Text.of(if (strings.toString() == "") "無記錄" else strings.toString())
                            )

                            Command.SINGLE_SUCCESS
                        })
                    )
                    dispatcher.register(literal("votereset")
                    .requires { source -> source.hasPermissionLevel(4) }
                    .then(argument("message", greedyString())
                        .executes { ctx ->
                            val options = getString(ctx, "message")
                            val strings = StringBuilder()
                            var i = 0
                            for (s in options.split(" ".toRegex()).dropLastWhile { it.isEmpty() }
                                .toTypedArray()) {
                                i++
                                strings.append("+").append(i).append(" ").append(s).append(" ")
                            }
                            voteStrs.clear()
                            voteReset = true
                            ctx.source.server.playerManager.broadcast(
                                Text.translatable(
                                    "chat.type.text",
                                    ctx.source.player!!.displayName,
                                    strings.toString()
                                ),
                                MessageType.SYSTEM
                            )
                            LOGGER.info(ctx.source.player!!.name.string + " use votes clear")

                            Command.SINGLE_SUCCESS
                        })
                    )
                }
            })
        }

        fun onPlayerMessage(player: ServerPlayerEntity, message: String, ci: CallbackInfo) {
            val index = player.name

            LOGGER.debug("Mixin things start")

            if (message.contains("+")) {
                if (message.startsWith("++") && player.hasPermissionLevel(4)) {
                    voteLastStr = null
                    voteLast = true
                    LOGGER.info("vote start")
                } else if (message.startsWith("+") && voteLast) {
                    voteLastStr = message
                    voteLast = false
                } else if (message.substring(message.indexOf("+")).length >= 2 && voteReset) {
                    var value = message.substring(message.indexOf("+"), message.indexOf("+") + 2)
                    val c = value.toCharArray()[1]
                    if (c >= '\ud800') {
                        value = message.substring(message.indexOf("+"), message.indexOf("+") + 3)
                    }
                    if (voteStrs[index] == null || voteStrs[index] != value) {
                        voteStrs[index] = value
                        lastMessage.remove(index)
                        LOGGER.info("put " + index.string + " " + value)
                    } else if (lastTimes.getOrDefault(index, 0) >= 2) {
                        player.sendMessage(Text.of("\u00a7c投票無變更 不重置次數 已重複3次(含)以上"))
                        ci.cancel()
                    }
                }
            }

            if (!ci.isCancelled) {
                if (message != lastMessage.getOrDefault(index, "")) {
                    lastMessage[index] = message
                    LOGGER.debug("put $index $message")
                    lastTimes[index] = 0
                    LOGGER.debug("times " + lastTimes[index])
                } else {
                    if (lastTimes[index]!! < 2) {
                        lastTimes[index] = lastTimes[index]!! + 1
                        LOGGER.debug("times " + lastTimes[index])
                    } else {
                        player.sendMessage(Text.of("\u00a7c已重複3次(含)以上"))
                        ci.cancel()
                    }
                }
            }

        }
    }
}